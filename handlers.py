import random
import json
import datetime
import re
from utils import add_message, load_memory, build_markov_chain
from gensim.models import Word2Vec

MEMORY_FILE = "memory.json"
# -------------------- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ù–ò–Ø --------------------
def detect_mood(text):
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ö–æ—Ä–æ—à–µ–µ –∏–ª–∏ –ø–ª–æ—Ö–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    bad_words = ["–¥—É—Ä–∞–∫", "—Ç—É–ø–æ–π", "–∏–¥–∏–æ—Ç", "–Ω–µ–Ω–∞–≤–∏–∂—É", "–∂–æ–ø–∞", "–ø–æ—à–ª–∞", "—Ö—É–π", "–±–µ—Å–∏—Ç"]
    good_words = ["—Å–ø–∞—Å–∏–±–æ", "–∫–ª–∞—Å—Å–Ω–æ", "–æ—Ç–ª–∏—á–Ω–æ", "—É—Ä–∞", "–ª—é–±–ª—é", "—Å—É–ø–µ—Ä", "–∫—Ä—É—Ç–æ", "—Ä–∞–¥–æ—Å—Ç—å"]
    
    text_lower = text.lower()
    
    if any(word in text_lower for word in bad_words):
        return "bad"
    elif any(word in text_lower for word in good_words):
        return "good"
    else:
        # –µ—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω—ã—Ö —Å–ª–æ–≤, –≤—ã–±–∏—Ä–∞–µ–º –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ "good" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return "good"

# -------------------- –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–û–û–ë–©–ï–ù–ò–Ø –° –ù–ê–°–¢–†–û–ï–ù–ò–ï–ú --------------------
def add_message_with_mood(username, text):
    mood = detect_mood(text)
    add_message(username, text, mood)
    return mood

# -------------------- –ì–ï–ù–ï–†–ê–¶–ò–Ø –û–¢–í–ï–¢–ê –í–ò–ö–ò --------------------
def vika_reply(message_text, username=None):
    memory = load_memory()
    
    # –æ—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
    text = re.sub(r"@\w+", "", message_text)
    text = re.sub(r"(https?://\S+)", "", text)
    text = re.sub(r"[^\w\s\?]", "", text).strip()
    if not text:
        return "–≠–º–º–º‚Ä¶ –ø—É—Å—Ç–æ –ø–æ–∫–∞ üòÖ"
    
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    mood = add_message_with_mood(username or "unknown", text)
    
    # –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø—Ä–æ—à–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
    past_msgs = [msg for msg in memory.get("history", []) if msg.get("mood") == mood]
    
    # —Å–æ–±–∏—Ä–∞–µ–º —Å–ª–æ–≤–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∏–ª–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    context_words = []
    if past_msgs:
        context_words = [word for msg in past_msgs[-50:] for word in msg["text"].split()]
    if not context_words:
        context_words = text.split()
    
    # Markov + —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Å–ª–æ–≤
    markov = build_markov_chain(memory)
    reply_words = []
    current_word = random.choice(context_words)
    
    # –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∂–µ–ª–∞–µ–º—É—é –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ (–∞–¥–∞–ø—Ç–∏–≤–Ω–æ)
    min_len = max(4, len(text.split()) // 2)
    max_len = max(6, len(text.split()) * 2)
    reply_len = random.randint(min_len, max_len)
    
    for i in range(reply_len):
        # –∏–Ω–æ–≥–¥–∞ –≤—Å—Ç–∞–≤–ª—è–µ–º "–∑–∞–¥—É–º–∫—É"
        if random.random() < 0.1:
            reply_words.append(random.choice(["—ç—ç—ç", "–Ω—É", "—Ö–º", "–ª–∞–¥–Ω–æ"]))
        
        reply_words.append(current_word)
        
        next_words = markov.get(current_word)
        if next_words:
            current_word = random.choice(next_words)
        else:
            current_word = random.choice(context_words)
    
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, —á—Ç–æ–±—ã –º—ã—Å–ª—å –±—ã–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
    sentence_endings = [".", "!", "?"]
    reply = " ".join(reply_words).strip()
    if reply[-1] not in sentence_endings:
        reply += random.choice([".", "!", "?"])
    
    # —Ä–µ–¥–∫–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–º–µ–Ω–∏
    if username and random.random() < 0.1:
        reply = f"{username}, {reply}"
    
    return reply
